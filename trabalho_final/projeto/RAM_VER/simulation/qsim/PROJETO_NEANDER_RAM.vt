// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2024 19:14:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PROJETO_NEANDER_RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PROJETO_NEANDER_RAM_vlg_sample_tst(
	CLK_IN,
	RST,
	RUN_STEP,
	STEP_UP,
	sampler_tx
);
input  CLK_IN;
input  RST;
input  RUN_STEP;
input  STEP_UP;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_IN or RST or RUN_STEP or STEP_UP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PROJETO_NEANDER_RAM_vlg_check_tst (
	AC0_A,
	AC0_B,
	AC0_C,
	AC0_D,
	AC0_E,
	AC0_F,
	AC0_G,
	AC1_A,
	AC1_B,
	AC1_C,
	AC1_D,
	AC1_E,
	AC1_F,
	AC1_G,
	AC_O,
	ADDR,
	C_AC,
	C_NZ,
	C_PC,
	C_RDM,
	C_REM,
	C_RI,
	DATA,
	GOTO_T0,
	HLT_OUT,
	INC_PC,
	N_OUT,
	PC0_A,
	PC0_B,
	PC0_C,
	PC0_D,
	PC0_E,
	PC0_F,
	PC0_G,
	PC1_A,
	PC1_B,
	PC1_C,
	PC1_D,
	PC1_E,
	PC1_F,
	PC1_G,
	PC_O,
	READ,
	RI_O,
	SEL,
	TEMP_O,
	ULA_ADD,
	ULA_AND,
	ULA_NOT,
	ULA_OR,
	ULA_Y,
	WRITE,
	Z_OUT,
	sampler_rx
);
input  AC0_A;
input  AC0_B;
input  AC0_C;
input  AC0_D;
input  AC0_E;
input  AC0_F;
input  AC0_G;
input  AC1_A;
input  AC1_B;
input  AC1_C;
input  AC1_D;
input  AC1_E;
input  AC1_F;
input  AC1_G;
input [7:0] AC_O;
input [7:0] ADDR;
input  C_AC;
input  C_NZ;
input  C_PC;
input  C_RDM;
input  C_REM;
input  C_RI;
input [7:0] DATA;
input  GOTO_T0;
input  HLT_OUT;
input  INC_PC;
input  N_OUT;
input  PC0_A;
input  PC0_B;
input  PC0_C;
input  PC0_D;
input  PC0_E;
input  PC0_F;
input  PC0_G;
input  PC1_A;
input  PC1_B;
input  PC1_C;
input  PC1_D;
input  PC1_E;
input  PC1_F;
input  PC1_G;
input [7:0] PC_O;
input  READ;
input [7:0] RI_O;
input  SEL;
input [7:0] TEMP_O;
input  ULA_ADD;
input  ULA_AND;
input  ULA_NOT;
input  ULA_OR;
input  ULA_Y;
input  WRITE;
input  Z_OUT;
input sampler_rx;

reg  AC0_A_expected;
reg  AC0_B_expected;
reg  AC0_C_expected;
reg  AC0_D_expected;
reg  AC0_E_expected;
reg  AC0_F_expected;
reg  AC0_G_expected;
reg  AC1_A_expected;
reg  AC1_B_expected;
reg  AC1_C_expected;
reg  AC1_D_expected;
reg  AC1_E_expected;
reg  AC1_F_expected;
reg  AC1_G_expected;
reg [7:0] AC_O_expected;
reg [7:0] ADDR_expected;
reg  C_AC_expected;
reg  C_NZ_expected;
reg  C_PC_expected;
reg  C_RDM_expected;
reg  C_REM_expected;
reg  C_RI_expected;
reg [7:0] DATA_expected;
reg  GOTO_T0_expected;
reg  HLT_OUT_expected;
reg  INC_PC_expected;
reg  N_OUT_expected;
reg  PC0_A_expected;
reg  PC0_B_expected;
reg  PC0_C_expected;
reg  PC0_D_expected;
reg  PC0_E_expected;
reg  PC0_F_expected;
reg  PC0_G_expected;
reg  PC1_A_expected;
reg  PC1_B_expected;
reg  PC1_C_expected;
reg  PC1_D_expected;
reg  PC1_E_expected;
reg  PC1_F_expected;
reg  PC1_G_expected;
reg [7:0] PC_O_expected;
reg  READ_expected;
reg [7:0] RI_O_expected;
reg  SEL_expected;
reg [7:0] TEMP_O_expected;
reg  ULA_ADD_expected;
reg  ULA_AND_expected;
reg  ULA_NOT_expected;
reg  ULA_OR_expected;
reg  ULA_Y_expected;
reg  WRITE_expected;
reg  Z_OUT_expected;

reg  AC0_A_prev;
reg  AC0_B_prev;
reg  AC0_C_prev;
reg  AC0_D_prev;
reg  AC0_E_prev;
reg  AC0_F_prev;
reg  AC0_G_prev;
reg  AC1_A_prev;
reg  AC1_B_prev;
reg  AC1_C_prev;
reg  AC1_D_prev;
reg  AC1_E_prev;
reg  AC1_F_prev;
reg  AC1_G_prev;
reg [7:0] AC_O_prev;
reg [7:0] ADDR_prev;
reg  C_AC_prev;
reg  C_NZ_prev;
reg  C_PC_prev;
reg  C_RDM_prev;
reg  C_REM_prev;
reg  C_RI_prev;
reg [7:0] DATA_prev;
reg  GOTO_T0_prev;
reg  HLT_OUT_prev;
reg  INC_PC_prev;
reg  N_OUT_prev;
reg  PC0_A_prev;
reg  PC0_B_prev;
reg  PC0_C_prev;
reg  PC0_D_prev;
reg  PC0_E_prev;
reg  PC0_F_prev;
reg  PC0_G_prev;
reg  PC1_A_prev;
reg  PC1_B_prev;
reg  PC1_C_prev;
reg  PC1_D_prev;
reg  PC1_E_prev;
reg  PC1_F_prev;
reg  PC1_G_prev;
reg [7:0] PC_O_prev;
reg  READ_prev;
reg [7:0] RI_O_prev;
reg  SEL_prev;
reg [7:0] TEMP_O_prev;
reg  ULA_ADD_prev;
reg  ULA_AND_prev;
reg  ULA_NOT_prev;
reg  ULA_OR_prev;
reg  ULA_Y_prev;
reg  WRITE_prev;
reg  Z_OUT_prev;

reg [7:0] AC_O_expected_prev;
reg  C_AC_expected_prev;
reg [7:0] PC_O_expected_prev;

reg [7:0] last_AC_O_exp;
reg  last_C_AC_exp;
reg [7:0] last_PC_O_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:53] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 53'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC0_A_prev = AC0_A;
	AC0_B_prev = AC0_B;
	AC0_C_prev = AC0_C;
	AC0_D_prev = AC0_D;
	AC0_E_prev = AC0_E;
	AC0_F_prev = AC0_F;
	AC0_G_prev = AC0_G;
	AC1_A_prev = AC1_A;
	AC1_B_prev = AC1_B;
	AC1_C_prev = AC1_C;
	AC1_D_prev = AC1_D;
	AC1_E_prev = AC1_E;
	AC1_F_prev = AC1_F;
	AC1_G_prev = AC1_G;
	AC_O_prev = AC_O;
	ADDR_prev = ADDR;
	C_AC_prev = C_AC;
	C_NZ_prev = C_NZ;
	C_PC_prev = C_PC;
	C_RDM_prev = C_RDM;
	C_REM_prev = C_REM;
	C_RI_prev = C_RI;
	DATA_prev = DATA;
	GOTO_T0_prev = GOTO_T0;
	HLT_OUT_prev = HLT_OUT;
	INC_PC_prev = INC_PC;
	N_OUT_prev = N_OUT;
	PC0_A_prev = PC0_A;
	PC0_B_prev = PC0_B;
	PC0_C_prev = PC0_C;
	PC0_D_prev = PC0_D;
	PC0_E_prev = PC0_E;
	PC0_F_prev = PC0_F;
	PC0_G_prev = PC0_G;
	PC1_A_prev = PC1_A;
	PC1_B_prev = PC1_B;
	PC1_C_prev = PC1_C;
	PC1_D_prev = PC1_D;
	PC1_E_prev = PC1_E;
	PC1_F_prev = PC1_F;
	PC1_G_prev = PC1_G;
	PC_O_prev = PC_O;
	READ_prev = READ;
	RI_O_prev = RI_O;
	SEL_prev = SEL;
	TEMP_O_prev = TEMP_O;
	ULA_ADD_prev = ULA_ADD;
	ULA_AND_prev = ULA_AND;
	ULA_NOT_prev = ULA_NOT;
	ULA_OR_prev = ULA_OR;
	ULA_Y_prev = ULA_Y;
	WRITE_prev = WRITE;
	Z_OUT_prev = Z_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	AC_O_expected_prev = AC_O_expected;
	C_AC_expected_prev = C_AC_expected;
	PC_O_expected_prev = PC_O_expected;
end


// expected PC_O[ 7 ]
initial
begin
	PC_O_expected[7] = 1'bX;
end 
// expected PC_O[ 6 ]
initial
begin
	PC_O_expected[6] = 1'bX;
end 
// expected PC_O[ 5 ]
initial
begin
	PC_O_expected[5] = 1'bX;
end 
// expected PC_O[ 4 ]
initial
begin
	PC_O_expected[4] = 1'bX;
end 
// expected PC_O[ 3 ]
initial
begin
	PC_O_expected[3] = 1'bX;
end 
// expected PC_O[ 2 ]
initial
begin
	PC_O_expected[2] = 1'bX;
end 
// expected PC_O[ 1 ]
initial
begin
	PC_O_expected[1] = 1'bX;
end 
// expected PC_O[ 0 ]
initial
begin
	PC_O_expected[0] = 1'bX;
end 

// expected C_AC
initial
begin
	C_AC_expected = 1'bX;
end 
// expected AC_O[ 7 ]
initial
begin
	AC_O_expected[7] = 1'bX;
end 
// expected AC_O[ 6 ]
initial
begin
	AC_O_expected[6] = 1'bX;
end 
// expected AC_O[ 5 ]
initial
begin
	AC_O_expected[5] = 1'bX;
end 
// expected AC_O[ 4 ]
initial
begin
	AC_O_expected[4] = 1'bX;
end 
// expected AC_O[ 3 ]
initial
begin
	AC_O_expected[3] = 1'bX;
end 
// expected AC_O[ 2 ]
initial
begin
	AC_O_expected[2] = 1'bX;
end 
// expected AC_O[ 1 ]
initial
begin
	AC_O_expected[1] = 1'bX;
end 
// expected AC_O[ 0 ]
initial
begin
	AC_O_expected[0] = 1'bX;
end 
// generate trigger
always @(AC0_A_expected or AC0_A or AC0_B_expected or AC0_B or AC0_C_expected or AC0_C or AC0_D_expected or AC0_D or AC0_E_expected or AC0_E or AC0_F_expected or AC0_F or AC0_G_expected or AC0_G or AC1_A_expected or AC1_A or AC1_B_expected or AC1_B or AC1_C_expected or AC1_C or AC1_D_expected or AC1_D or AC1_E_expected or AC1_E or AC1_F_expected or AC1_F or AC1_G_expected or AC1_G or AC_O_expected or AC_O or ADDR_expected or ADDR or C_AC_expected or C_AC or C_NZ_expected or C_NZ or C_PC_expected or C_PC or C_RDM_expected or C_RDM or C_REM_expected or C_REM or C_RI_expected or C_RI or DATA_expected or DATA or GOTO_T0_expected or GOTO_T0 or HLT_OUT_expected or HLT_OUT or INC_PC_expected or INC_PC or N_OUT_expected or N_OUT or PC0_A_expected or PC0_A or PC0_B_expected or PC0_B or PC0_C_expected or PC0_C or PC0_D_expected or PC0_D or PC0_E_expected or PC0_E or PC0_F_expected or PC0_F or PC0_G_expected or PC0_G or PC1_A_expected or PC1_A or PC1_B_expected or PC1_B or PC1_C_expected or PC1_C or PC1_D_expected or PC1_D or PC1_E_expected or PC1_E or PC1_F_expected or PC1_F or PC1_G_expected or PC1_G or PC_O_expected or PC_O or READ_expected or READ or RI_O_expected or RI_O or SEL_expected or SEL or TEMP_O_expected or TEMP_O or ULA_ADD_expected or ULA_ADD or ULA_AND_expected or ULA_AND or ULA_NOT_expected or ULA_NOT or ULA_OR_expected or ULA_OR or ULA_Y_expected or ULA_Y or WRITE_expected or WRITE or Z_OUT_expected or Z_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC0_A = %b | expected AC0_B = %b | expected AC0_C = %b | expected AC0_D = %b | expected AC0_E = %b | expected AC0_F = %b | expected AC0_G = %b | expected AC1_A = %b | expected AC1_B = %b | expected AC1_C = %b | expected AC1_D = %b | expected AC1_E = %b | expected AC1_F = %b | expected AC1_G = %b | expected AC_O = %b | expected ADDR = %b | expected C_AC = %b | expected C_NZ = %b | expected C_PC = %b | expected C_RDM = %b | expected C_REM = %b | expected C_RI = %b | expected DATA = %b | expected GOTO_T0 = %b | expected HLT_OUT = %b | expected INC_PC = %b | expected N_OUT = %b | expected PC0_A = %b | expected PC0_B = %b | expected PC0_C = %b | expected PC0_D = %b | expected PC0_E = %b | expected PC0_F = %b | expected PC0_G = %b | expected PC1_A = %b | expected PC1_B = %b | expected PC1_C = %b | expected PC1_D = %b | expected PC1_E = %b | expected PC1_F = %b | expected PC1_G = %b | expected PC_O = %b | expected READ = %b | expected RI_O = %b | expected SEL = %b | expected TEMP_O = %b | expected ULA_ADD = %b | expected ULA_AND = %b | expected ULA_NOT = %b | expected ULA_OR = %b | expected ULA_Y = %b | expected WRITE = %b | expected Z_OUT = %b | ",AC0_A_expected_prev,AC0_B_expected_prev,AC0_C_expected_prev,AC0_D_expected_prev,AC0_E_expected_prev,AC0_F_expected_prev,AC0_G_expected_prev,AC1_A_expected_prev,AC1_B_expected_prev,AC1_C_expected_prev,AC1_D_expected_prev,AC1_E_expected_prev,AC1_F_expected_prev,AC1_G_expected_prev,AC_O_expected_prev,ADDR_expected_prev,C_AC_expected_prev,C_NZ_expected_prev,C_PC_expected_prev,C_RDM_expected_prev,C_REM_expected_prev,C_RI_expected_prev,DATA_expected_prev,GOTO_T0_expected_prev,HLT_OUT_expected_prev,INC_PC_expected_prev,N_OUT_expected_prev,PC0_A_expected_prev,PC0_B_expected_prev,PC0_C_expected_prev,PC0_D_expected_prev,PC0_E_expected_prev,PC0_F_expected_prev,PC0_G_expected_prev,PC1_A_expected_prev,PC1_B_expected_prev,PC1_C_expected_prev,PC1_D_expected_prev,PC1_E_expected_prev,PC1_F_expected_prev,PC1_G_expected_prev,PC_O_expected_prev,READ_expected_prev,RI_O_expected_prev,SEL_expected_prev,TEMP_O_expected_prev,ULA_ADD_expected_prev,ULA_AND_expected_prev,ULA_NOT_expected_prev,ULA_OR_expected_prev,ULA_Y_expected_prev,WRITE_expected_prev,Z_OUT_expected_prev);
	$display("| real AC0_A = %b | real AC0_B = %b | real AC0_C = %b | real AC0_D = %b | real AC0_E = %b | real AC0_F = %b | real AC0_G = %b | real AC1_A = %b | real AC1_B = %b | real AC1_C = %b | real AC1_D = %b | real AC1_E = %b | real AC1_F = %b | real AC1_G = %b | real AC_O = %b | real ADDR = %b | real C_AC = %b | real C_NZ = %b | real C_PC = %b | real C_RDM = %b | real C_REM = %b | real C_RI = %b | real DATA = %b | real GOTO_T0 = %b | real HLT_OUT = %b | real INC_PC = %b | real N_OUT = %b | real PC0_A = %b | real PC0_B = %b | real PC0_C = %b | real PC0_D = %b | real PC0_E = %b | real PC0_F = %b | real PC0_G = %b | real PC1_A = %b | real PC1_B = %b | real PC1_C = %b | real PC1_D = %b | real PC1_E = %b | real PC1_F = %b | real PC1_G = %b | real PC_O = %b | real READ = %b | real RI_O = %b | real SEL = %b | real TEMP_O = %b | real ULA_ADD = %b | real ULA_AND = %b | real ULA_NOT = %b | real ULA_OR = %b | real ULA_Y = %b | real WRITE = %b | real Z_OUT = %b | ",AC0_A_prev,AC0_B_prev,AC0_C_prev,AC0_D_prev,AC0_E_prev,AC0_F_prev,AC0_G_prev,AC1_A_prev,AC1_B_prev,AC1_C_prev,AC1_D_prev,AC1_E_prev,AC1_F_prev,AC1_G_prev,AC_O_prev,ADDR_prev,C_AC_prev,C_NZ_prev,C_PC_prev,C_RDM_prev,C_REM_prev,C_RI_prev,DATA_prev,GOTO_T0_prev,HLT_OUT_prev,INC_PC_prev,N_OUT_prev,PC0_A_prev,PC0_B_prev,PC0_C_prev,PC0_D_prev,PC0_E_prev,PC0_F_prev,PC0_G_prev,PC1_A_prev,PC1_B_prev,PC1_C_prev,PC1_D_prev,PC1_E_prev,PC1_F_prev,PC1_G_prev,PC_O_prev,READ_prev,RI_O_prev,SEL_prev,TEMP_O_prev,ULA_ADD_prev,ULA_AND_prev,ULA_NOT_prev,ULA_OR_prev,ULA_Y_prev,WRITE_prev,Z_OUT_prev);
`endif
	if (
		( AC_O_expected_prev[0] !== 1'bx ) && ( AC_O_prev[0] !== AC_O_expected_prev[0] )
		&& ((AC_O_expected_prev[0] !== last_AC_O_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[0] = AC_O_expected_prev[0];
	end
	if (
		( AC_O_expected_prev[1] !== 1'bx ) && ( AC_O_prev[1] !== AC_O_expected_prev[1] )
		&& ((AC_O_expected_prev[1] !== last_AC_O_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[1] = AC_O_expected_prev[1];
	end
	if (
		( AC_O_expected_prev[2] !== 1'bx ) && ( AC_O_prev[2] !== AC_O_expected_prev[2] )
		&& ((AC_O_expected_prev[2] !== last_AC_O_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[2] = AC_O_expected_prev[2];
	end
	if (
		( AC_O_expected_prev[3] !== 1'bx ) && ( AC_O_prev[3] !== AC_O_expected_prev[3] )
		&& ((AC_O_expected_prev[3] !== last_AC_O_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[3] = AC_O_expected_prev[3];
	end
	if (
		( AC_O_expected_prev[4] !== 1'bx ) && ( AC_O_prev[4] !== AC_O_expected_prev[4] )
		&& ((AC_O_expected_prev[4] !== last_AC_O_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[4] = AC_O_expected_prev[4];
	end
	if (
		( AC_O_expected_prev[5] !== 1'bx ) && ( AC_O_prev[5] !== AC_O_expected_prev[5] )
		&& ((AC_O_expected_prev[5] !== last_AC_O_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[5] = AC_O_expected_prev[5];
	end
	if (
		( AC_O_expected_prev[6] !== 1'bx ) && ( AC_O_prev[6] !== AC_O_expected_prev[6] )
		&& ((AC_O_expected_prev[6] !== last_AC_O_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[6] = AC_O_expected_prev[6];
	end
	if (
		( AC_O_expected_prev[7] !== 1'bx ) && ( AC_O_prev[7] !== AC_O_expected_prev[7] )
		&& ((AC_O_expected_prev[7] !== last_AC_O_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_O_expected_prev);
		$display ("     Real value = %b", AC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_AC_O_exp[7] = AC_O_expected_prev[7];
	end
	if (
		( C_AC_expected_prev !== 1'bx ) && ( C_AC_prev !== C_AC_expected_prev )
		&& ((C_AC_expected_prev !== last_C_AC_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_AC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_AC_expected_prev);
		$display ("     Real value = %b", C_AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_C_AC_exp = C_AC_expected_prev;
	end
	if (
		( PC_O_expected_prev[0] !== 1'bx ) && ( PC_O_prev[0] !== PC_O_expected_prev[0] )
		&& ((PC_O_expected_prev[0] !== last_PC_O_exp[0]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[0] = PC_O_expected_prev[0];
	end
	if (
		( PC_O_expected_prev[1] !== 1'bx ) && ( PC_O_prev[1] !== PC_O_expected_prev[1] )
		&& ((PC_O_expected_prev[1] !== last_PC_O_exp[1]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[1] = PC_O_expected_prev[1];
	end
	if (
		( PC_O_expected_prev[2] !== 1'bx ) && ( PC_O_prev[2] !== PC_O_expected_prev[2] )
		&& ((PC_O_expected_prev[2] !== last_PC_O_exp[2]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[2] = PC_O_expected_prev[2];
	end
	if (
		( PC_O_expected_prev[3] !== 1'bx ) && ( PC_O_prev[3] !== PC_O_expected_prev[3] )
		&& ((PC_O_expected_prev[3] !== last_PC_O_exp[3]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[3] = PC_O_expected_prev[3];
	end
	if (
		( PC_O_expected_prev[4] !== 1'bx ) && ( PC_O_prev[4] !== PC_O_expected_prev[4] )
		&& ((PC_O_expected_prev[4] !== last_PC_O_exp[4]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[4] = PC_O_expected_prev[4];
	end
	if (
		( PC_O_expected_prev[5] !== 1'bx ) && ( PC_O_prev[5] !== PC_O_expected_prev[5] )
		&& ((PC_O_expected_prev[5] !== last_PC_O_exp[5]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[5] = PC_O_expected_prev[5];
	end
	if (
		( PC_O_expected_prev[6] !== 1'bx ) && ( PC_O_prev[6] !== PC_O_expected_prev[6] )
		&& ((PC_O_expected_prev[6] !== last_PC_O_exp[6]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[6] = PC_O_expected_prev[6];
	end
	if (
		( PC_O_expected_prev[7] !== 1'bx ) && ( PC_O_prev[7] !== PC_O_expected_prev[7] )
		&& ((PC_O_expected_prev[7] !== last_PC_O_exp[7]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_O_expected_prev);
		$display ("     Real value = %b", PC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_PC_O_exp[7] = PC_O_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PROJETO_NEANDER_RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_IN;
reg RST;
reg RUN_STEP;
reg STEP_UP;
// wires                                               
wire AC0_A;
wire AC0_B;
wire AC0_C;
wire AC0_D;
wire AC0_E;
wire AC0_F;
wire AC0_G;
wire AC1_A;
wire AC1_B;
wire AC1_C;
wire AC1_D;
wire AC1_E;
wire AC1_F;
wire AC1_G;
wire [7:0] AC_O;
wire [7:0] ADDR;
wire C_AC;
wire C_NZ;
wire C_PC;
wire C_RDM;
wire C_REM;
wire C_RI;
wire [7:0] DATA;
wire GOTO_T0;
wire HLT_OUT;
wire INC_PC;
wire N_OUT;
wire PC0_A;
wire PC0_B;
wire PC0_C;
wire PC0_D;
wire PC0_E;
wire PC0_F;
wire PC0_G;
wire PC1_A;
wire PC1_B;
wire PC1_C;
wire PC1_D;
wire PC1_E;
wire PC1_F;
wire PC1_G;
wire [7:0] PC_O;
wire READ;
wire [7:0] RI_O;
wire SEL;
wire [7:0] TEMP_O;
wire ULA_ADD;
wire ULA_AND;
wire ULA_NOT;
wire ULA_OR;
wire ULA_Y;
wire WRITE;
wire Z_OUT;

wire sampler;                             

// assign statements (if any)                          
PROJETO_NEANDER_RAM i1 (
// port map - connection between master ports and signals/registers   
	.AC0_A(AC0_A),
	.AC0_B(AC0_B),
	.AC0_C(AC0_C),
	.AC0_D(AC0_D),
	.AC0_E(AC0_E),
	.AC0_F(AC0_F),
	.AC0_G(AC0_G),
	.AC1_A(AC1_A),
	.AC1_B(AC1_B),
	.AC1_C(AC1_C),
	.AC1_D(AC1_D),
	.AC1_E(AC1_E),
	.AC1_F(AC1_F),
	.AC1_G(AC1_G),
	.AC_O(AC_O),
	.ADDR(ADDR),
	.C_AC(C_AC),
	.C_NZ(C_NZ),
	.C_PC(C_PC),
	.C_RDM(C_RDM),
	.C_REM(C_REM),
	.C_RI(C_RI),
	.CLK_IN(CLK_IN),
	.DATA(DATA),
	.GOTO_T0(GOTO_T0),
	.HLT_OUT(HLT_OUT),
	.INC_PC(INC_PC),
	.N_OUT(N_OUT),
	.PC0_A(PC0_A),
	.PC0_B(PC0_B),
	.PC0_C(PC0_C),
	.PC0_D(PC0_D),
	.PC0_E(PC0_E),
	.PC0_F(PC0_F),
	.PC0_G(PC0_G),
	.PC1_A(PC1_A),
	.PC1_B(PC1_B),
	.PC1_C(PC1_C),
	.PC1_D(PC1_D),
	.PC1_E(PC1_E),
	.PC1_F(PC1_F),
	.PC1_G(PC1_G),
	.PC_O(PC_O),
	.READ(READ),
	.RI_O(RI_O),
	.RST(RST),
	.RUN_STEP(RUN_STEP),
	.SEL(SEL),
	.STEP_UP(STEP_UP),
	.TEMP_O(TEMP_O),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y),
	.WRITE(WRITE),
	.Z_OUT(Z_OUT)
);

// RST
initial
begin
	RST = 1'b0;
	RST = #10000 1'b1;
end 

// RUN_STEP
initial
begin
	RUN_STEP = 1'b1;
end 

// STEP_UP
initial
begin
	repeat(57)
	begin
		STEP_UP = 1'b0;
		STEP_UP = #8750 1'b1;
		# 8750;
	end
	STEP_UP = 1'b0;
end 

PROJETO_NEANDER_RAM_vlg_sample_tst tb_sample (
	.CLK_IN(CLK_IN),
	.RST(RST),
	.RUN_STEP(RUN_STEP),
	.STEP_UP(STEP_UP),
	.sampler_tx(sampler)
);

PROJETO_NEANDER_RAM_vlg_check_tst tb_out(
	.AC0_A(AC0_A),
	.AC0_B(AC0_B),
	.AC0_C(AC0_C),
	.AC0_D(AC0_D),
	.AC0_E(AC0_E),
	.AC0_F(AC0_F),
	.AC0_G(AC0_G),
	.AC1_A(AC1_A),
	.AC1_B(AC1_B),
	.AC1_C(AC1_C),
	.AC1_D(AC1_D),
	.AC1_E(AC1_E),
	.AC1_F(AC1_F),
	.AC1_G(AC1_G),
	.AC_O(AC_O),
	.ADDR(ADDR),
	.C_AC(C_AC),
	.C_NZ(C_NZ),
	.C_PC(C_PC),
	.C_RDM(C_RDM),
	.C_REM(C_REM),
	.C_RI(C_RI),
	.DATA(DATA),
	.GOTO_T0(GOTO_T0),
	.HLT_OUT(HLT_OUT),
	.INC_PC(INC_PC),
	.N_OUT(N_OUT),
	.PC0_A(PC0_A),
	.PC0_B(PC0_B),
	.PC0_C(PC0_C),
	.PC0_D(PC0_D),
	.PC0_E(PC0_E),
	.PC0_F(PC0_F),
	.PC0_G(PC0_G),
	.PC1_A(PC1_A),
	.PC1_B(PC1_B),
	.PC1_C(PC1_C),
	.PC1_D(PC1_D),
	.PC1_E(PC1_E),
	.PC1_F(PC1_F),
	.PC1_G(PC1_G),
	.PC_O(PC_O),
	.READ(READ),
	.RI_O(RI_O),
	.SEL(SEL),
	.TEMP_O(TEMP_O),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y),
	.WRITE(WRITE),
	.Z_OUT(Z_OUT),
	.sampler_rx(sampler)
);
endmodule

